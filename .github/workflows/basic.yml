on:
  push:
  pull_request:
  schedule:
    # Run weekly to keep Rust toolchain changes fresh
    - cron: '0 0 * * 1'

name: "Build, Test, Format, and Lint"

jobs:
  multiple_toolchains:
    name: Multiple toolchain tasks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta

    steps:
      - uses: actions/checkout@v4

      - name: Install ${{ matrix.rust }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      # TODO: just switch over to https://github.com/Swatinem/rust-cache
      - name: Get rustc version
        id: get-version
        run: |
          echo "version=$(rustc -V | sed 's/ /_/g') >> $GITHUB_OUTPUT"

      - name: Cargo registry cache
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: multiple_toolchains-cargo-registry-${{ steps.get-version.outputs.version }}

      - name: Cargo build cache
        uses: actions/cache@v3
        with:
          path: target
          key: multiple_toolchains-cargo-build-${{ steps.get-version.outputs.version }}

      # Uses `--all-targets` here to make sure that things like benchmarks
      # still compile
      - name: Build all targets
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-targets --all-features

      - name: Run the test suite
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features

      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Check clippy lints
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  # Only check building and clippy on MSRV since the other tasks are prone to
  # problems from dev dependencies having higher MSRVs
  msrv_only:
    name: Check MSRV compilation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install MSRV toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.61.0
          override: true
          components: clippy

      - name: Get rustc version
        id: get-version
        run: |
          echo "::set-output name=version::$(rustc -V | sed 's/ /_/g')"

      - name: Cargo registry cache
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: msrv_only-cargo-registry-${{ steps.get-version.outputs.version }}

      - name: Cargo build cache
        uses: actions/cache@v3
        with:
          path: target
          key: msrv_only-cargo-build-${{ steps.get-version.outputs.version }}

      # All targets isn't used here due to MSRV issues with `clap`
      - name: Build all targets
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-features

      - name: Check clippy lints
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  nightly_only:
    name: Nightly only tasks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Pin to a specific nightly version since we only want it for being able
      # to use unstable features, not because we _need_ the newest version.
      # This makes caching actually viable for more than just a day
      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2023-10-01
          override: true
      
      - name: Get rustc version
        id: get-version
        run: |
          echo "::set-output name=version::$(rustc -V | sed 's/ /_/g')"

      - name: Cargo registry cache
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: nightly_only-cargo-registry-${{ steps.get-version.outputs.version }}

      - name: Cargo build cache
        uses: actions/cache@v3
        with:
          path: |
            keyvalues-parser/fuzz/target
            keyvalues-serde/fuzz/target
          key: nightly_only-cargo-build-${{ steps.get-version.outputs.version }}-1

      # Actually check the fuzzers so that they don't break silently
      - name: Check parser fuzzers
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --manifest-path keyvalues-parser/fuzz/Cargo.toml

      - name: Check ser de fuzzers
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --manifest-path keyvalues-serde/fuzz/Cargo.toml
